---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: "Jiachen Ai, UID: 206182615"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
#| eval: true
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2. Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4. After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Answer:** I applied for the Student Developer Pack at GitHub using my UCLA email. I created a private repository `biostat-203b-2024-winter` and added `Hua-Zhou` and TA `Tomoki-Okuno` as my collaborators with write permission. The top directories of the repository are `hw1`. I maintain two branches `main` and `develop`. All code and extra data sets to reproduce results are in the `main` branch. And I have read all the instructions carefully.

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Answer:** I completed the CITI training on 1/18/2021. The completion report is available at [here](https://www.citiprogram.org/verify/?k6b4494ee-7938-4b63-920b-1da005d66727-60622234). The completion certificate is available at [here](https://www.citiprogram.org/verify/?w2edd6762-e466-4ba4-b34d-4928a65f485d-60622234).

## Q3. Linux Shell Commands

1. Make the MIMIC v2.2 data available at location `~/mimic`. 
```{bash}
#| eval: false
ls -l ~/mimic/
```
Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises. 

  Use Bash commands to answer following questions.

**Answer:** I downloaded the MIMIC-IV v2.2 data to my local machine and put them in the directory `~/mimic`. The data files are available at `~/mimic`. The data files are not put into Git. The data files are not copied into my directory. The gz data files are not decompressed.

```{bash}
ls -l ~/mimic/
```

2. Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

**Answer:**
```{bash}
ls -l ~/mimic/hosp
```
```{bash}
ls -l ~/mimic/icu
```
The reason for why these data files are distributed as `.csv.gz` files instead of `.csv` files is: the `.csv.gz` indicates that the file is compressed using gzip compression. It used compressed files rather than the `.csv` files is because the data set contains comprehensive information for each patient while they were in the hospital, so it would need huge storage space if not compressed. Compression reduces the file size, making it quicker to download and transfer and requiring less bandwidth when downloading, which can be important for users with limited internet bandwidth.

3. Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

**Answer:** 
`zcat` is used to display the content of one or more compressed files on the standard output. 
`zless` is used to view the contents of a compressed file one page at a time. It provides a convenient way to scroll through the contents of a compressed file. 
`zmore` is similar to `zless` and serves as a pager for compressed files and is used to view the contents of a compressed file one page at a time. It primarily supports forward navigation through the content. 
`zgrep` is used to search for a pattern within one or more compressed files.

4. (Looping in Bash) What's the output of the following bash script?
```{bash}
#| eval: false
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```
Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

**Answer:**
```{bash}
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  echo "Number of lines in $datafile: $(zcat < $datafile | wc -l)"
done
```

5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

**Answer:**
Display the first few lines of admissions.csv.gz
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head -10
```

```{bash}
#Count the number of rows in admissions.csv.gz
row_count=$(zcat < ~/mimic/hosp/admissions.csv.gz | wc -l)
echo "Number of rows in admissions.csv.gz: $row_count"
```


```{bash}
#Extract unique patient IDs (subject_id)
unique_patients=$(zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, 'NR > 1 {print $2}' | sort -u)
echo "Number of unique patients in admissions.csv.gz: $(echo "$unique_patients" | wc -l)"
```

Therefore, the number of patients listed in the `patients.csv.gz` file matches the number of unique patients in the `admissions.csv.gz` file.

6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)

**Answer:**
```{bash}
#Getting to know the variables names
zcat < ~/mimic/hosp/admissions.csv.gz | head -n 1
```

```{bash}
#possible values taken by the variable `admission_type` and its count
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F',' 'NR > 1 {print $6}' | sort | uniq -c
```

```{bash}
#possible values taken by the variable `admission_location` and its count
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F',' 'NR > 1 {print $8}' | sort | uniq -c
```

```{bash}
#possible values taken by the variable `insurance` and its count
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F',' 'NR > 1 {print $10}' | sort | uniq -c
```
```{bash}
#possible values taken by the variable `race` and its count
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F',' 'NR > 1 {print $13}' | sort | uniq -c
```

7. _To compress, or not to compress. That's the question._ Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

**Answer:**
1)
```{bash}
#compare the file sizes
#compressed file size
ls -lh ~/mimic/hosp/labevents.csv.gz

#decompress the file 
gzip -dk < ~/mimic/hosp/labevents.csv.gz > ~/mimic/hosp/labevents.csv
#uncompressed file size
ls -lh ~/mimic/hosp/labevents.csv

```
The compressed file size is 1.8G and the uncompressed file size is 13G. The uncompressed file size is more than 7 times larger than the compressed file size. 
2)
```{bash}
#compare the run times
#run time of zcat on the compressed file
time zcat < ~/mimic/hosp/labevents.csv.gz | wc -l

#run time of wc on the uncompressed file
time wc -l ~/mimic/hosp/labevents.csv

```
The run time of zcat on the compressed file is 18.82s and the run time of wc on the uncompressed file is 8.142s. 

3) Trade-off between Storage and Speed: Compressed files save storage space but may require additional time for decompression during access. Uncompressed files provide faster access but consume more storage space. If storage space is a critical concern and access speed can be tolerated, compression is beneficial. However, if rapid access is crucial and storage space is not a limiting factor, using uncompressed files might be preferred.

4)
```{bash}
# Remove the large uncompressed file
rm ~/mimic/hosp/labevents.csv
```


## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.
```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  # some bash commands here
done
```

2. What's the difference between the following two commands?
```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```
Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: false
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

## Q6. Book

1. Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book _Reproducible Research with R and RStudio_ to your local machine. 

2. Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.
---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 23 @ 11:59PM"
author: "Jiachen Ai. UID: 206182615"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 10
    fig.height: 4
    message: FALSE
execute:
  eval: false    
---

Display machine information for reproducibility:

```{r}
#| eval: true
sessionInfo()
```

Load necessary libraries (you can add more as needed).

```{r setup}
#| eval: true
library(arrow)
library(gtsummary)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(readr)
library(dplyr)
library(ggplot2)
library(DescTools)
```

Display your machine memory.

```{r}
#| eval: true
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png) Do a similar visualization for the patient with `subject_id` 10013310 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

**Answer**

**Step I**: getting the demographic information

\(1\) get to know the structure of `patients.csv.gz` and `admissions.csv.gz` by `zcat` and `head`.

```{bash}
#| eval: false
zcat < ~/mimic/hosp/patients.csv.gz | head
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

\(2\) read the `patients.csv.gz` and `admissions.csv.gz` by `read_csv` and `filter` the patient with `subject_id` 10013310. And then get the demographic information of the patient.

```{r}
#| eval: true
race <- read_csv("~/mimic/hosp/admissions.csv.gz") %>%
  filter(subject_id == 10013310) %>%
  distinct(race)

demographics <- read_csv("~/mimic/hosp/patients.csv.gz") %>%
  filter(subject_id == 10013310) %>%
  mutate(race = tolower(race$race))  # Lower case the race column
```

**Step II**: getting the top 3 diagnoses of the patient

\(1\) get to know the structure of `diagnoses_icd.csv.gz` and `d_icd_diagnoses.csv.gz` by `zcat` and `head`.

```{bash}
#| eval: false
zcat < ~/mimic/hosp/diagnoses_icd.csv.gz | head
zcat < ~/mimic/hosp/d_icd_diagnoses.csv.gz | head
```

\(2\) read the `diagnoses_icd.csv.gz` and `d_icd_diagnoses.csv.gz` by `read_csv` and `filter` the patient with `subject_id` 10013310. Combine the two tables by `left_join`. Here I found that there are several diagnoses for the patient in each patient hospitalization. So, I count the frequency of all diagnosis and select the top 3 diagnoses.

```{r}
#| eval: true
top_3_diagnoses <- read_csv("~/mimic/hosp/diagnoses_icd.csv.gz") %>%
  filter(subject_id == 10013310) %>%
  left_join(read_csv("~/mimic/hosp/d_icd_diagnoses.csv.gz"), 
            by = c("icd_code" = "icd_code", 
                   "icd_version" = "icd_version")) %>%
  
  group_by(long_title) %>%
  # Count the frequency of each diagnosis
  summarise(freq = n()) %>%
  # Select the top 3 diagnoses
  arrange(desc(freq)) %>%
  slice(1:3)
```

**Step III**: getting the ADT history of the patient

\(1\) get to know the structure of `diagnoses_icd.csv.gz` by `zcat` and `head`.

```{bash}
#| eval: false
zcat < ~/mimic/hosp/transfers.csv.gz | head
```

\(2\) read the `transfers.csv.gz` by `read_csv` and `filter` the patient with `subject_id` 10013310. And then get the ADT history of the patient. Also, I add a new column `segment_thickness` to represent the size of the line segment for the convenience of plotting.

```{r}
#| eval: true
# read the transfers.csv.gz and filter the patient 10013310
ADT <- read_csv("~/mimic/hosp/transfers.csv.gz") %>%
  filter(subject_id == 10013310) %>%
  filter(!is.na(careunit)) %>%
  # Add a new column segment_thickness 
  # to represent the size of the line segment
  mutate(segment_thickness = if_else(
    str_detect(careunit, "Care Unit"), 10, 8))
```

**Step IV**: getting the lab events of the patient from `labevents.parquet` with `subject_id` 10013310 by `arrow::open_dataset`.

\(1\) get to know the structure of `labevents.parquet` by `zcat` and `head`.

```{bash}
#| eval: false
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

\(2\) decompressing the `labevents.csv.gz file`.

```{r}
#| eval: false
system("gzip -d -k ~/mimic/hosp/labevents.csv.gz")
```

\(3\) re-writing the csv file `labevents.csv` in the Parquet format.

```{r}
#| eval: false
# Define the file paths
file_path <- "~/mimic/hosp/labevents.csv"
parquet_file_path <- "~/mimic/hosp/labevents.parquet"

# Rewrite the CSV file in Parquet format    
arrow::write_dataset(arrow::open_dataset(file_path, format = "csv"), 
                     parquet_file_path, format = "parquet")
```

Also, I create a symbolic link for the original directory to the Parquet file `labevents.parquet` under the path under the folder `./labevents_pq` available at the current working directory `hw3` for reproducibility.

```{bash}
#| eval: false
ln -s ~/mimic/hosp/labevents.parquet/
```

\(4\) Reading the `labevents.parquet` file using the `arrow::open_dataset`. The information I need is the `subject_id` and `charttime` columns. So, I use the `dplyr::select` function to select these two columns and the `dplyr::filter` function to filter the `subject_id` 10013310. Also, there are duplicated `charttime` values because several lab events can happen at the same time, so I use the `dplyr::distinct` function to keep the unique `charttime` values.

```{r}
#| eval: true
# read the labevents.parquet file
labevents <- arrow::open_dataset('./labevents_pq', 
                                 format = "parquet") %>%
  # Select the subject_id and charttime columns
  dplyr::select(subject_id, charttime) %>%
  # Filter the patient 10013310
  dplyr::filter(subject_id == 10013310) %>%
  # get rid of the duplicated charttime values
  dplyr::distinct(subject_id, charttime) %>%
  collect()
```

**Step V**: getting the procedure events of the patient.

\(1\) get to know the structure of `procedures_icd.csv.gz` and `d_icd_procedures.csv.gz` by `zcat` and `head`.

```{bash}
#| eval: false
zcat < ~/mimic/hosp/procedures_icd.csv.gz | head
zcat < ~/mimic/hosp/d_icd_procedures.csv.gz | head
```

\(2\) read the `procedures_icd.csv.gz` and `d_icd_procedures.csv.gz` by `read_csv` and `filter` the patient with `subject_id` 10013310. Combine the two tables by `left_join`.

```{r}
#| eval: true
# read the procedures_icd.csv.gz and d_icd_procedures.csv.gz
procedures <- read_csv("~/mimic/hosp/procedures_icd.csv.gz") %>%
  filter(subject_id == 10013310) %>%
  left_join(read_csv("~/mimic/hosp/d_icd_procedures.csv.gz"), 
            by = c("icd_code" = "icd_code", 
                   "icd_version" = "icd_version"))
```

**Step VI**: getting the plot by `ggplot2`.

I use the `ggplot` function to create a new plot. I use the `scale_x_datetime` function to specify the x axis limits, the `scale_y_discrete` function to specify the y axis with 3 levels, the `geom_point` function to add procedure events, the `scale_shape_manual` function to manually set the number of shapes according to the number of titles. Also, I use the `geom_segment` function to add ADT history, the `geom_point` function to add lab events, and the `geom_text` function to add diagnosis events. Finally, I use the `theme` function to set the theme of the plot.

```{r}
#| eval: true
ADT_history <- ggplot() +
  
  # Specify x axis limits
  scale_x_datetime(name = "Calendar Time", 
                   # minus 1 day from the minimum intime 
                   # to display all the data
                   limits = c(min(ADT$intime) - days(1), 
                              max(ADT$outtime))) +
  
  # Specify y axis with 3 levels
  scale_y_discrete(name = NULL, 
                   limits = c("Procedure", "Lab", "ADT")) + 
  
  # Add procedure events
  geom_point(data = procedures, 
             aes(x = as.POSIXct(chartdate), 
                 y = "Procedure", 
                 # Get shorter title using regex
                 shape = sub(",.*", "", long_title)),
             size = 3) + 
  
  # Manually set the number of shapes according to the number of titles
  scale_shape_manual(values = c(1:n_distinct(procedures$long_title))) +
  
  # Add lab events
  geom_point(data = labevents, 
             aes(x = charttime, y = "Lab"), 
             shape = 3, size = 2) +
  
  # Add ADT events
  geom_segment(data = ADT, 
               aes(x = intime, 
                   xend = outtime, 
                   y = "ADT", 
                   yend = "ADT", 
                   color = careunit, 
                   size = segment_thickness)) +
  
  # Set legend position and arrangement
  theme_bw() +
  theme(legend.position = "bottom", 
        legend.box = "vertical", 
        legend.key.size = unit(0, "pt"),
        legend.text = element_text(size = 7)) +
  
  # Set legend titles and arrangement
  guides(color = guide_legend(title = "Care Unit", 
                              ncol = 3,
                              keywidth = 1),
         shape = guide_legend(title = "Procedure", 
                              ncol = 2),
         # Remove legend for ADT
         size = FALSE) +
  
  # Add patient information as title and subtitle
  labs(title = paste("Patient", demographics$subject_id[1], ", ",
                     demographics$gender[1], ", ",
                     demographics$anchor_age[1], "years old, ",
                     demographics$race[1]),
       subtitle = paste(top_3_diagnoses$long_title[1],
                        top_3_diagnoses$long_title[2],
                        top_3_diagnoses$long_title[3],
                        sep = "\n"))
  
# Print the plot
print(ADT_history)
```

### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

Do a similar visualization for the patient `10013310`.

**Answer**

\(1\) get to know the structure of `chartevents.csv.gz` and `d_items.csv.gz` by `zcat` and `head`.

```{bash}
#| eval: false
zcat < ~/mimic/icu/chartevents.csv.gz | head
zcat < ~/mimic/icu/d_items.csv.gz | head
```

\(2\) decompressing the `chartevents.csv.gz` by `gzip`.

```{r}
#| eval: false
system("gzip -d -k ~/mimic/icu/chartevents.csv.gz")
```

\(3\) prepare the data for the plot.

Read the `d_items.csv.gz` and `chartevents.csv.gz` by `read_csv` and `filter` the patient with `subject_id` 10013310. Combine the two tables by `left_join`. Then, read the `chartevents.csv.gz` and filter the patient with `subject_id` 10013310. Combine the two tables by `left_join`.

```{r}
#| eval: true
# read the d_items.csv.gz
items <- read_csv("~/mimic/icu/d_items.csv.gz") %>%
  dplyr::select(c(itemid, label, abbreviation)) %>%
  # filter the abbreviation with HR, NBPd, NBPs, RR, Temperature F
  dplyr::filter(abbreviation %in% c("HR", "NBPd", 
                                    "NBPs", "RR", 
                                    "Temperature F"))

# define the file path of chartevents.csv
file_path_chartevents <- "~/mimic/icu/chartevents.csv"

# read the chartevents.csv.gz
chartevents <- arrow::open_dataset(file_path_chartevents, 
                                   format = "csv") %>%
  dplyr::filter(itemid %in% c(220045, 220179, 
                              220180, 220210, 
                              223761)) %>%
  dplyr::filter(subject_id == 10013310) %>%
  dplyr::select(-c(hadm_id, caregiver_id, storetime, warning)) %>%
  collect() %>%
  left_join(items, by = c("itemid" = "itemid"))
```

\(4\) plot the data.

```{r}
#| eval: true
vitals_line_plot <- ggplot(chartevents, 
                           aes(x = charttime, 
                               y = valuenum, 
                               color = abbreviation)) +
  geom_point() +
  geom_line() +
  # use facet_grid to show all 
  # combinations of abbreviation and stay_id
  facet_grid(abbreviation ~ stay_id, scales = "free") +
  labs(title = paste("Patient", 
                     chartevents$subject_id[1], 
                     "ICU stays - Vitals"),
       x = "",
       y = "") +
  # set the theme
  theme_light(base_size = 9) +
  # remove legend
  theme(legend.position = "none") +
  # to avoid overlapping of the x-axis labels, 
  # using guides with n.dodge = 2
  guides(x = guide_axis(n.dodge = 2)) 

print(vitals_line_plot)
```

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are

```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`.

**Answer**

Import `icustays.csv.gz` as a tibble `icustays_tble`.

```{r}
#| eval: true
icustays_tble <- arrow::open_dataset("~/mimic/icu/icustays.csv.gz", 
                                     format = "csv") %>%
  collect()
```

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs.

**Answer**

By counting the number of unique `subject_id`, I can find that there are 50920 unique `subject_id`.

```{r}
#| eval: true
# calculate the number of unique subject_id
icustays_tble %>%
  dplyr::distinct(subject_id) %>%
  dplyr::count()
```

Check if a subject_id can have multiple ICU stays. By grouping the data by `subject_id` and counting the number of unique `stay_id`, I can find that a `subject_id` can have multiple ICU stays. And there are 12448 `subject_id` with multiple ICU stays.

```{r}
#| eval: true
icustays_tble %>%
  dplyr::distinct(stay_id) %>%
  dplyr::count()

# Check if a subject_id can have multiple ICU stays
icustays_tble %>%
  dplyr::group_by(subject_id) %>%
  summarise(num_icu_stays = n_distinct(stay_id)) %>%
  dplyr::filter(num_icu_stays > 1) %>%
  dplyr::count()

```

Summarize the number of ICU stays per `subject_id` by graphs.

```{r}
#| eval: true
icustays_tble %>%
  group_by(subject_id) %>%
  summarise(num_icu_stays = n_distinct(stay_id)) %>%
  ggplot(aes(x = num_icu_stays)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Distribution of ICU Stays per Subject",
       x = "Number of ICU Stays per `subject_id`",
       y = "Frequency") +
  theme_minimal()
```

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.

```{r}
#| eval: true
admissions_tble <- arrow::open_dataset("~/mimic/hosp/admissions.csv.gz", 
                                       format = "csv") %>%
  collect()
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

-   number of admissions per patient\
-   admission hour (anything unusual?)\
-   admission minute (anything unusual?)\
-   length of hospital stay (from admission to discharge) (anything unusual?)

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting),

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient's age at their first admission has been fixed to 300.

**Answer**

**Number of admissions per patient**:

The pattern of the number of admissions per patient:

The majority of patients have only one admission, and a small portion of patients have multiple admissions.

```{r}
#| eval: true
# number of admissions per patient
admissions_tble %>%
  group_by(subject_id) %>%
  summarise(num_admissions = n_distinct(hadm_id)) %>%
  ggplot(aes(x = num_admissions)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Distribution of admissions per patient",
       x = "Number of admissions per subject_id",
       y = "Frequency") +
  theme_minimal()
```

**Admission hour**:

The pattern of the admission hour:

Yes. There are some unusual patterns in the admission hour. The number of admission hour decreases from 0 to 6, and then increases from 8 to 18, with an exception at 7. Then, the number of admission hour decreases from 18 to 23.The frequencies from 0 and 7 seem unusual because they are higher than expected for late night and early morning times. This could be due to certain hospital operations or activities during those hours.

```{r}
#| eval: true
# change the timezone to UTC
admissions_tble_admission_hour <- admissions_tble %>%
  mutate(admittime = with_tz(admittime, "UTC")) 

# plot the admission hour
admissions_tble_admission_hour %>%
  ggplot(aes(x = hour(admittime))) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Admission Hour",
       x = "Hour",
       y = "Count") +
  theme_minimal()
```

**Admission minute**:

The pattern of the admission minute:

Yes. There are unusual patterns in the admission minute. The frequencies of the admission minute are extremely high at some specific minutes, such as 0, 15, 30, and 45. This could be due to the fact that the admission time is recorded at these specific minutes, or the data is rounded to these specific minutes. For the rest of the minutes, the frequencies are relatively low.

```{r}
#| eval: true
admissions_tble_admission_hour %>%
  ggplot(aes(x = minute(admittime))) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(title = "Admission Minute",
       x = "Minute",
       y = "Count") +
  theme_minimal()
```

**Length of hospital stay**:

The pattern of the length of hospital stay:

I think the distribution of the length of hospital stay is not unusual. The majority of patients stayed in the hospital for less than 10 days, and only a few patients stayed in the hospital for more than 10 days. The maximum length of stay is around 120 days, which is expected as most patients are admitted for short-term care, and only a few patients require long-term care.

```{r}
#| eval: true
length_of_stay <- admissions_tble %>%
  mutate(dischtime = with_tz(dischtime, "UTC")) %>%
  mutate(admittime = with_tz(admittime, "UTC")) %>%
  mutate(length_of_stay = as.numeric(
    difftime(dischtime, admittime, units = "days")))

length_of_stay %>%
  ggplot(aes(x = length_of_stay)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Length of Hospital Stay",
       x = "Length of Stay (days)",
       y = "Count") +
  theme_minimal()
```

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.

**Answer**

```{r}
#| eval: true
patients_tble <- arrow::open_dataset(
  sources = "~/mimic/hosp/patients.csv.gz", 
  format = "csv"
) %>%
  dplyr::collect()
```

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.

**Answer**

**Summary of `gender`**:

Explanation of the pattern:

According to the pie chart, there are more male than female patients. This may be due to the gender distribution in the general population in the area where the hospital is located.

```{r}
#| eval: true
# add percentage of each gender
gender_summary <- patients_tble %>%
  count(gender) %>%
  mutate(percentage = n / sum(n) * 100)

# plot the pie chart
ggplot(gender_summary, aes(x = "", y = percentage, fill = gender)) +
  geom_bar(stat = "identity", width = 1) +
  geom_text(aes(label = paste0(round(percentage), "%")), 
            position = position_stack(vjust = 0.5)) +
  # use coord_polar to make the pie chart
  coord_polar(theta = "y") +
  labs(title = "Distribution of Gender", fill = "Gender") +
  theme_void()
```

**Summary of `anchor_age`**:

Explanation of the pattern:

The distribution of anchor_age is multimodal, with peaks at around 21, 60, and over 89. This suggests that there are different age groups represented in the dataset, with a relatively high number of patients in their early 20s and around 60 years old. This could be due to the fact that certain age groups are more likely to require hospital care, or it could be due to the demographics of the general population in the area where the hospital is located. There are also a few patients who are over 89 years old, which may due to that some elderly patients' age is recorded as fixed value if they are over 89 years old.

```{r}
#| eval: true
# using bar plot to show the distribution of anchor_age
patients_tble %>%
  ggplot(aes(x = anchor_age)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Distribution of Anchor Age",
       x = "Anchor Age",
       y = "Count") +
  theme_minimal()
```

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements.

```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

**Answer** Step 1: Load the `icustays.csv.gz` and `d_labitems.csv.gz` files as tibbles `icustays_tble` and `dlabitems_tble`, respectively.

```{r}
#| eval: true
# load the icustays.csv.gz file
icustays_tble <- arrow::open_dataset("~/mimic/icu/icustays.csv.gz", 
                                     format = "csv") %>%
  collect() %>%
  print(width = Inf)
```

```{r}
#| eval: true
# define the target items
target_items <- c(50912, 50971, 
                  50983, 50902, 
                  50882, 51221, 
                  51301, 50931)

# load the d_labitems.csv.gz file
dlabitems_tble <- arrow::open_dataset("~/mimic/hosp/d_labitems.csv.gz", 
                                      format = "csv") %>%
  filter(itemid %in% target_items) %>%
  collect() %>%
  print(width = Inf)
```

Step 2: Load the `labevents.csv.gz` file as a tibble `labevents_tble` and filter the rows with the target items and the patients in `icustays_tble`.

```{r}
#| eval: true
labevents <- arrow::open_dataset('./labevents_pq', 
                                 format = "parquet") |>
  select(subject_id, itemid, storetime, valuenum) |>
  filter(itemid %in% target_items) |>
  filter(subject_id %in% icustays_tble$subject_id) |>
  collect() |>
  print(width = Inf)
```

```{r}
#| eval: true
if (file.exists("labevents_tble.rds")) {
  labevents_tble <- read_rds("labevents_tble.rds") |> 
    print(width = Inf)
} else {
  labevents_tble <- labevents |>
# join with icustays_tble to the labevents table to 
# get the stay_id and intime
  left_join(icustays_tble[,c('subject_id', 'stay_id', 'intime')],
            by = "subject_id") |>
# make sure the lab measurement is before the ICU stay
  filter(storetime < intime) |>
# try to keep the latest measurement
  group_by(subject_id, stay_id, itemid) |>
# sort by storetime and keep the last measurement
  arrange(storetime, by_group = TRUE) |>
  slice_tail(n = 1) |>
# remove the storetime and intime columns
  select(-storetime, -intime) |>
# because the form of the `itemid` is in long format, 
# we need to convert it to wide format
  pivot_wider(names_from = itemid, values_from = valuenum) |>
# use the more meaningful names by renaming the columns
  rename(creatinine = `50912`, 
         potassium = `50971`, 
         sodium = `50983`, 
         chloride = `50902`,
         bicarbonate = `50882`, 
         hematocrit = `51221`, 
         white_blood_cell_count = `51301`, 
         glucose = `50931`) |>
  print(width, Inf) |>
  write_rds("labevents_tble.rds")
}
```

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient's information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement.

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

**Answer**

I create a symbolic link for the original directory to the Parquet file `chartevents.parquet` under the path under the folder `./chartevents_pq` available at the current working directory `hw3` for reproducibility.

```{bash}
#| eval: false
ln -s ~/mimic/icu/chartevents.parquet/
```

```{r}
#| eval: true
d_items_tble <- arrow::open_dataset("~/mimic/icu/d_items.csv.gz", 
                                    format = "csv") %>%
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) %>%
  collect() %>%
  print(width = Inf)
```

```{r}
#| eval: true
chartevents <- arrow::open_dataset('./chartevents_pq', 
                                   format = "parquet") |>
  select(subject_id, itemid, charttime, valuenum) |>
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) |>
  filter(subject_id %in% icustays_tble$subject_id) |>
  collect() |>
  print(width = Inf)
```

```{r}
#| eval: true
# Check if the file exists
if (file.exists("chartevents_tble.rds")) {
  
  # If the file exists, read the data from the file and print it
  chartevents_tble <- read_rds("chartevents_tble.rds") 
  print(chartevents_tble, width = Inf)
  
} else {
  
  # If the file doesn't exist, create the chartevents_tble
  
  # Left join chartevents with icustays_tble to get stay_id and intime
  chartevents_tble <- chartevents %>%
    left_join(icustays_tble %>% select(subject_id, 
                                       stay_id, 
                                       intime, 
                                       outtime),
              by = "subject_id") %>%
    # Filter charted events within ICU stay
    filter(charttime >= intime, charttime <= outtime) %>%
    # Keep the first measurement for each subject_id, stay_id, itemid
    group_by(subject_id, stay_id, itemid) %>%
    arrange(charttime, .by_group = TRUE) %>%
    slice_head(n = 1) %>%
    # Remove unnecessary columns
    select(-charttime, -intime, -outtime) %>%
    # Convert itemid to wide format
    pivot_wider(names_from = itemid, values_from = valuenum) %>%
    # Rename columns with meaningful names
    rename(heart_rate = `220045`, 
           systolic_non_invasive_blood_pressure = `220179`, 
           diastolic_non_invasive_blood_pressure = `220180`, 
           temperature_in_Fahrenheit = `223761`, 
           respiratory_rate = `220210`) %>%
    print(width = Inf) %>%
    write_rds("chartevents_tble.rds")  
}
```

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` \>= 18) and columns contain at least following variables

-   all variables in `icustays_tble`\
-   all variables in `admissions_tble`\
-   all variables in `patients_tble`
-   the last lab measurements before the ICU stay in `labevents_tble`
-   the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)

```{r}
#| eval: true
mimic_icu_cohort <- icustays_tble |>
  # join with admissions_tble to the icustays table to get the
  # admission information
  left_join(admissions_tble, by = c("hadm_id", "subject_id")) |>
  # join with patients_tble to the icustays table to get the
  # patient information
  left_join(patients_tble, by = "subject_id") |>
  # join with labevents_tble to the icustays table to get the
  # last lab measurements before ICU stay
  left_join(labevents_tble, by = c("subject_id", "stay_id")) |>
  # join with chartevents_tble to the icustays table to get the
  # first vital measurements within the ICU stay
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) |>
  # create a new column age_intime
  mutate(age_intime = year(intime) - anchor_year + anchor_age) |>
  # select the rows where age_intime is greater than or equal to 18
  filter(age_intime >= 18) |>
  print(width = Inf)
```

## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

-   Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

-   Length of ICU stay `los` vs the last available lab measurements before ICU stay filter storetime intime

-   Length of ICU stay `los` vs the first vital measurements within the ICU stay

-   Length of ICU stay `los` vs first ICU unit

**Answer** (1.1) Length of ICU stay `los` vs demographic

```{r}
#| eval: true
mimic_icu_cohort %>%
  group_by(race) %>%
  ggplot(aes(x = los, y = race)) +
  geom_col() 
  labs(title = "Summary of Length of ICU stay by race",
       x = "Race",
       y = "Length of ICU stay (days)") +  
  theme_minimal()
  
mimic_icu_cohort %>%
  group_by(race) %>%
  summarize(mean_los = mean(los, na.rm = TRUE),
            std_dev = sd(los, na.rm = TRUE),
            iqr = IQR(los, na.rm = TRUE)) 


```

(1.2) Length of ICU stay `los` vs insurance

```{r}
#| eval: true
mimic_icu_cohort %>%
  group_by(insurance) %>%
  ggplot(aes(x = los, y = insurance)) +
  geom_boxplot() +
  labs(title = "Summary of Length of ICU stay by insurance",
       x = "Insurance",
       y = "Length of ICU stay (days)") +  
  theme_minimal()
```

(1.3) Length of ICU stay `los` vs marital_status

```{r}
#| eval: true
mimic_icu_cohort %>%
  group_by(marital_status) %>%
  ggplot(aes(x = los, y = marital_status)) +
  geom_violin() +
  geom_point() +
  
  labs(title = "Summary of Length of ICU stay by Marital Status",
       x = "Length of ICU stay (days)",
       y = "Marital Status") +  
  theme_minimal()

```

(1.4) Length of ICU stay `los` vs gender

```{r}
#| eval: true
mimic_icu_cohort %>%
  group_by(gender) %>%
  ggplot(aes(x = gender, y = los)) +  
  geom_count() +
  labs(title = "Summary of Length of ICU stay by Gender",
       x = "Gender",
       y = "Length of ICU stay (days)") +
  theme_minimal()
```

(1.5) Length of ICU stay `los` vs age at intime

```{r}
#| eval: true
mimic_icu_cohort |>
  ggplot(aes(y = los, x = age_intime)) +
  geom_point() +
  labs(title = "Summary of Length of ICU stay by Age at intime",
       x = "Length of ICU stay (days)",
       y = "Age at intime") +
  theme_minimal()
```

\(2\) Length of ICU stay `los` vs the last available lab measurements before ICU stay

```{r}
#| eval: true
# prepare the variables to be used in the plot
variables <- c("white_blood_cell_count", 
               "heart_rate", "respiratory_rate", 
               "temperature_in_Fahrenheit", 
               "systolic_non_invasive_blood_pressure", 
               "diastolic_non_invasive_blood_pressure")
# get the last lab measurements before ICU stay
mimic_icu_cohort_select <- mimic_icu_cohort %>%
  select(all_of(variables), los) %>%
  drop_na() %>%
  mutate(across(c(all_of(variables), los), 
                ~ trim(., trim_proportion = 1, na.rm = TRUE)))

# using a for loop to create separate plots for each variable
plots <- list()

for (variable in variables) {
  plots[[variable]] <- mimic_icu_cohort %>%
    ggplot(aes_string(y = "los", x = variable)) +
    geom_point() +
    labs(title = paste("Length of ICU stay vs", variable),
         x = variable,
         y = "Length of ICU stay (days)") +
    theme_minimal()
}

plots
```

\(3\) Length of ICU stay `los` vs the first vital measurements within the ICU stay

```{r}
#| eval: true
# prepare the variables to be used in the plot
variables <- c("heart_rate", "respiratory_rate", 
               "temperature_in_Fahrenheit", 
               "systolic_non_invasive_blood_pressure", 
               "diastolic_non_invasive_blood_pressure")
# get the first vital measurements within the ICU stay
mimic_icu_cohort_select <- mimic_icu_cohort %>%
  select(all_of(variables), los) %>%
  drop_na() %>%
  mutate(across(c(all_of(variables), los), 
                ~ trim(., trim_proportion = 1, na.rm = TRUE)))

# using a for loop to create separate plots for each variable
plots <- list()

for (variable in variables) {
  plots[[variable]] <- mimic_icu_cohort %>%
    ggplot(aes_string(y = "los", x = variable)) +
    geom_point() +
    labs(title = paste("Length of ICU stay vs", variable),
         x = variable,
         y = "Length of ICU stay (days)") +
    theme_minimal()
}

plots
```

\(4\) Length of ICU stay `los` vs first ICU

```{r}
mimic_icu_cohort %>%
  count(first_careunit) %>%
  ggplot(aes(x = "", y = n, fill = first_careunit)) +
  geom_bar(width = 1, stat = "identity", color = "white") +
  labs(title = "Proportion of ICU Stays by First ICU",
       x = "First ICU",
       y = "Proportion",
       fill = "First ICU") +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  theme_minimal() 

```
